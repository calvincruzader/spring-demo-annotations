annotations notes
- When autowiring, doesn't have to be an interface, you can use classes as well just fine.
- Right when you initialize an ClassPathXmlApplicationContext variable, Spring will do its component scanning and store 
(what exactly? a collection of beans? and store them )

general notes learned today: 
what does it mean to serialize an object? to serialize the object means to convert it into a byte stream

What 3 properties comprise a JavaBean:
- all properites are private 
- a public no-arg constructor is provided
- implements serializable    <- (its objects can be put into bytestreams!)

What does it mean for a class in Java to implement Serializable? 
- it means objects of that class are serializable/can be serialized/ can be written into streams, thus to files, object databases, and ANYTHING really

What does it mean to be a JavaBean vs another class? 
- a class defines a JavaBean if it follows the standards

Bean must be

for @Autowired, it doesn't have to be a setter method, you can set it as anything and Spring will use this for dependency injection 

for @Autowired, you can set it on a property to automatically create getters/setters for it
	- uses java api called REFLECTION to do it

Spring injection types
- constructor injection 
- setter injection
- field injection

When running an app, when @Autowired runs and there are multiple @Components that an @Autowired can choose from, Spring gets confused and crashes.
- resolution: @Qualifier annotation to connect between @Autowired and a specific component

Spring @Autowired @Component scanning default quirks:
- if the name of the class with a @Component annotation is being scanned, then: 
	- if only the first letter is capitalized, then it will by default require a @Qualifier annotation with first letter lowercase
		- for example: HappyFortuneService class should have @Qualifier("happyFortuneService") annotation
	- else, if BOTH the first and second letters are capitalized, then Spring will require a default @Qualifier annotation with no letters lowercased
		- for example: RESTFortuneService class should have @Qualifier("RESTFortuneService") annotation
		
@Value annotation grabs from a *.properties file, fed in through a *Context.xml, which is called in by new ClassPathXmlApplicationContext(*Context.xml) and 
thus an instance is created 

------

{+}Bean scopes with annotations
Default bean scope is singleton: 
Coach coach1 = context.getBean("tennisCoach", Coach.class)
Coach coach2 = context.getBean("tennisCoach", Coach.class) 
coach1 and coach2 both reference the same bean instance!

------

Change @Scope to change (the scope of) how the objects get created in memory 

@PostConstruct - custom initialization work per object
@PreDestroy - custom cleanup code per object 
	- DOES NOT WORK on @Scope("prototype") beans! 
	
------
No xml needed! 

@Configuration
@ComponentScan("com.luv2code.springdemo") // scans entire package for things
